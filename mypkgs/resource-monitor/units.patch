diff --git a/extension.js b/extension.js
index a6e9743..6b81720 100644
--- a/extension.js
+++ b/extension.js
@@ -219,29 +219,29 @@ const ResourceMonitor = GObject.registerClass(
             });
 
             // Unit
-            this._cpuTemperatureUnit = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: '°C'
-            });
-            this._cpuTemperatureUnit.set_style('padding-left: 0.125em;');
-
-            this._cpuFrequencyUnit = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: 'MHz'
-            });
-            this._cpuFrequencyUnit.set_style('padding-left: 0.125em;');
-
-            this._cpuUnit = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: '%'
-            });
-            this._cpuUnit.set_style('padding-left: 0.125em;');
-
-            this._ramUnit = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: this._ramUnitType ? '%' : 'KB'
-            });
-            this._ramUnit.set_style('padding-left: 0.125em;');
+            // this._cpuTemperatureUnit = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: '°C'
+            // });
+            // this._cpuTemperatureUnit.set_style('padding-left: 0.125em;');
+
+            // this._cpuFrequencyUnit = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: 'MHz'
+            // });
+            // this._cpuFrequencyUnit.set_style('padding-left: 0.125em;');
+
+            // this._cpuUnit = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: '%'
+            // });
+            // this._cpuUnit.set_style('padding-left: 0.125em;');
+
+            // this._ramUnit = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: this._ramUnitType ? '%' : 'KB'
+            // });
+            // this._ramUnit.set_style('padding-left: 0.125em;');
 
             this._swapUnit = new St.Label({
                 y_align: Clutter.ActorAlign.CENTER,
@@ -249,17 +249,17 @@ const ResourceMonitor = GObject.registerClass(
             });
             this._swapUnit.set_style('padding-left: 0.125em;');
 
-            this._ethUnit = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: 'K'
-            });
-            this._ethUnit.set_style('padding-left: 0.125em;');
+            // this._ethUnit = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: 'K'
+            // });
+            // this._ethUnit.set_style('padding-left: 0.125em;');
 
-            this._wlanUnit = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: 'K'
-            });
-            this._wlanUnit.set_style('padding-left: 0.125em;');
+            // this._wlanUnit = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: 'K'
+            // });
+            // this._wlanUnit.set_style('padding-left: 0.125em;');
 
             // Value
             this._cpuValue = new St.Label({
@@ -332,19 +332,19 @@ const ResourceMonitor = GObject.registerClass(
                 case 'left':
                     this._box.add(this._cpuIcon);
                     this._box.add(this._cpuValue);
-                    this._box.add(this._cpuUnit);
+                    //this._box.add(this._cpuUnit);
 
                     this._box.add(this._cpuTemperatureValue);
-                    this._box.add(this._cpuTemperatureUnit);
+                    //this._box.add(this._cpuTemperatureUnit);
                     this._box.add(this._cpuTemperatureValueBracket);
                     this._box.add(this._cpuFrequencyValue);
-                    this._box.add(this._cpuFrequencyUnit);
+                    //this._box.add(this._cpuFrequencyUnit);
                     this._box.add(this._cpuFrequencyValueBracket);
                     this._box.add(this._cpuLoadAverageValue);
 
                     this._box.add(this._ramIcon);
                     this._box.add(this._ramValue);
-                    this._box.add(this._ramUnit);
+                    //this._box.add(this._ramUnit);
 
                     this._box.add(this._swapIcon);
                     this._box.add(this._swapValue);
@@ -358,11 +358,11 @@ const ResourceMonitor = GObject.registerClass(
 
                     this._box.add(this._ethIcon);
                     this._box.add(this._ethValue);
-                    this._box.add(this._ethUnit);
+                    //this._box.add(this._ethUnit);
 
                     this._box.add(this._wlanIcon);
                     this._box.add(this._wlanValue);
-                    this._box.add(this._wlanUnit);
+                    //this._box.add(this._wlanUnit);
 
                     this._box.add(this._gpuIcon);
                     this._box.add(this._gpuBox);
@@ -373,19 +373,19 @@ const ResourceMonitor = GObject.registerClass(
 
                 default:
                     this._box.add(this._cpuValue);
-                    this._box.add(this._cpuUnit);
+                    //this._box.add(this._cpuUnit);
 
                     this._box.add(this._cpuTemperatureValue);
-                    this._box.add(this._cpuTemperatureUnit);
+                    //this._box.add(this._cpuTemperatureUnit);
                     this._box.add(this._cpuTemperatureValueBracket);
                     this._box.add(this._cpuFrequencyValue);
-                    this._box.add(this._cpuFrequencyUnit);
+                    //this._box.add(this._cpuFrequencyUnit);
                     this._box.add(this._cpuFrequencyValueBracket);
                     this._box.add(this._cpuLoadAverageValue);
                     this._box.add(this._cpuIcon);
 
                     this._box.add(this._ramValue);
-                    this._box.add(this._ramUnit);
+                    //this._box.add(this._ramUnit);
                     this._box.add(this._ramIcon);
 
                     this._box.add(this._swapValue);
@@ -398,11 +398,11 @@ const ResourceMonitor = GObject.registerClass(
                     this._box.add(this._diskSpaceIcon);
 
                     this._box.add(this._ethValue);
-                    this._box.add(this._ethUnit);
+                    //this._box.add(this._ethUnit);
                     this._box.add(this._ethIcon);
 
                     this._box.add(this._wlanValue);
-                    this._box.add(this._wlanUnit);
+                    //this._box.add(this._wlanUnit);
                     this._box.add(this._wlanIcon);
 
                     this._box.add(this._gpuBox);
@@ -587,8 +587,8 @@ const ResourceMonitor = GObject.registerClass(
                 }
             });
 
-            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue, this._ethUnit);
-            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue, this._wlanUnit);
+            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue);
+            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue);
         }
 
         _onActiveConnectionRemoved(client, activeConnection) {
@@ -615,8 +615,8 @@ const ResourceMonitor = GObject.registerClass(
                 });
             });
 
-            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue, this._ethUnit);
-            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue, this._wlanUnit);
+            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue);
+            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue);
         }
 
         _refreshTimeChanged() {
@@ -691,7 +691,7 @@ const ResourceMonitor = GObject.registerClass(
         _cpuStatusChanged() {
             this._cpuStatus = this._settings.get_boolean(CPU_STATUS);
 
-            this._basicItemStatus(this._cpuStatus, (!this._thermalCpuTemperatureStatus && !this._cpuFrequencyStatus && !this._cpuLoadAverageStatus), this._cpuIcon, this._cpuValue, this._cpuUnit);
+            this._basicItemStatus(this._cpuStatus, (!this._thermalCpuTemperatureStatus && !this._cpuFrequencyStatus && !this._cpuLoadAverageStatus), this._cpuIcon, this._cpuValue);
         }
 
         _cpuWidthChanged() {
@@ -703,7 +703,7 @@ const ResourceMonitor = GObject.registerClass(
         _cpuFrequencyStatusChanged() {
             this._cpuFrequencyStatus = this._settings.get_boolean(CPU_FREQUENCY_STATUS);
 
-            this._basicItemStatus(this._cpuFrequencyStatus, (!this._cpuStatus && !this._thermalCpuTemperatureStatus && !this._cpuLoadAverageStatus), this._cpuIcon, this._cpuFrequencyValue, this._cpuFrequencyUnit, this._cpuFrequencyValueBracket);
+            this._basicItemStatus(this._cpuFrequencyStatus, (!this._cpuStatus && !this._thermalCpuTemperatureStatus && !this._cpuLoadAverageStatus), this._cpuIcon, this._cpuFrequencyValue, this._cpuFrequencyValueBracket);
         }
 
         _cpuFrequencyWidthChanged() {
@@ -727,7 +727,7 @@ const ResourceMonitor = GObject.registerClass(
         _ramStatusChanged() {
             this._ramStatus = this._settings.get_boolean(RAM_STATUS);
 
-            this._basicItemStatus(this._ramStatus, true, this._ramIcon, this._ramValue, this._ramUnit);
+            this._basicItemStatus(this._ramStatus, true, this._ramIcon, this._ramValue);
         }
 
         _ramWidthChanged() {
@@ -899,8 +899,8 @@ const ResourceMonitor = GObject.registerClass(
         _netAutoHideStatusChanged() {
             this._netAutoHideStatus = this._settings.get_boolean(NET_AUTO_HIDE_STATUS) && typeof NM !== 'undefined';
 
-            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue, this._ethUnit);
-            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue, this._wlanUnit);
+            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue);
+            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue);
         }
 
         _netUnitChanged() {
@@ -928,7 +928,7 @@ const ResourceMonitor = GObject.registerClass(
         _netEthStatusChanged() {
             this._netEthStatus = this._settings.get_boolean(NET_ETH_STATUS);
 
-            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue, this._ethUnit);
+            this._basicItemStatus((this._netEthStatus && this._nmEthStatus) || (this._netEthStatus && !this._netAutoHideStatus), true, this._ethIcon, this._ethValue);
         }
 
         _netEthWidthChanged() {
@@ -940,7 +940,7 @@ const ResourceMonitor = GObject.registerClass(
         _netWlanStatusChanged() {
             this._netWlanStatus = this._settings.get_boolean(NET_WLAN_STATUS);
 
-            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue, this._wlanUnit);
+            this._basicItemStatus((this._netWlanStatus && this._nmWlanStatus) || (this._netWlanStatus && !this._netAutoHideStatus), true, this._wlanIcon, this._wlanValue);
         }
 
         _netWlanWidthChanged() {
@@ -952,7 +952,7 @@ const ResourceMonitor = GObject.registerClass(
         _thermalCpuTemperatureStatusChanged() {
             this._thermalCpuTemperatureStatus = this._settings.get_boolean(THERMAL_CPU_TEMPERATURE_STATUS);
 
-            this._basicItemStatus(this._thermalCpuTemperatureStatus, (!this._cpuStatus && !this._cpuFrequencyStatus && !this._cpuLoadAverageStatus), this._cpuIcon, this._cpuTemperatureValue, this._cpuTemperatureUnit, this._cpuTemperatureValueBracket);
+            this._basicItemStatus(this._thermalCpuTemperatureStatus, (!this._cpuStatus && !this._cpuFrequencyStatus && !this._cpuLoadAverageStatus), this._cpuIcon, this._cpuTemperatureValue, this._cpuTemperatureValueBracket);
         }
 
         _thermalCpuTemperatureWidthChanged() {
@@ -1232,9 +1232,9 @@ const ResourceMonitor = GObject.registerClass(
                 this._cpuIdleOld = idle;
 
                 if (this._decimalsStatus) {
-                    this._cpuValue.text = `${cpuCurr.toFixed(1)}`;
+                    this._cpuValue.text = `${cpuCurr.toFixed(1)}%`;
                 } else {
-                    this._cpuValue.text = `${cpuCurr.toFixed(0)}`;
+                    this._cpuValue.text = `${cpuCurr.toFixed(0)}%`;
                 }
             });
         }
@@ -1279,13 +1279,11 @@ const ResourceMonitor = GObject.registerClass(
                 switch (this._ramUnitType) {
                     case 'perc':
                         if (this._decimalsStatus) {
-                            this._ramValue.text = `${(100 * value / total).toFixed(1)}`;
+                            this._ramValue.text = `${(100 * value / total).toFixed(1)}%`;
                         } else {
-                            this._ramValue.text = `${(100 * value / total).toFixed(0)}`;
+                            this._ramValue.text = `${(100 * value / total).toFixed(0)}%`;
                         }
 
-                        this._ramUnit.text = '%';
-
                         break;
 
                     case 'numeric':
@@ -1336,12 +1334,12 @@ const ResourceMonitor = GObject.registerClass(
                         }
 
                         if (this._decimalsStatus) {
-                            this._ramValue.text = `${value.toFixed(1)}`;
+                            this._ramValue.text = `${value.toFixed(1)}${unit}`;
                         } else {
-                            this._ramValue.text = `${value.toFixed(0)}`;
+                            this._ramValue.text = `${value.toFixed(0)}${unit}`;
                         }
 
-                        this._ramUnit.text = unit;
+                        unit;
 
                         break;
                 }
@@ -1797,6 +1795,7 @@ const ResourceMonitor = GObject.registerClass(
                 const unit = boolUnit ? 1000 : 1024;
                 const factor = boolUnit ? 8 : 1;
 
+                let eunit = "";
                 if (delta > 0) {
                     for (let i = 0; i < 2; i++) {
                         du[i] = ((duTot[i] - this._duTotEthOld[i]) * factor) / delta;
@@ -1805,17 +1804,17 @@ const ResourceMonitor = GObject.registerClass(
 
                     switch (this._netUnitMeasure) {
                         case 'b':
-                            this._ethUnit.text = boolUnit ? 'b' : 'B';
+                            eunit = boolUnit ? 'b' : 'B';
                             break;
 
                         case 'k':
-                            this._ethUnit.text = boolUnit ? 'k' : 'K';
+                            eunit = boolUnit ? 'k' : 'K';
                             du[0] /= unit;
                             du[1] /= unit;
                             break;
 
                         case 'm':
-                            this._ethUnit.text = boolUnit ? 'm' : 'M';
+                            eunit = boolUnit ? 'm' : 'M';
                             du[0] /= unit;
                             du[1] /= unit;
                             du[0] /= unit;
@@ -1823,7 +1822,7 @@ const ResourceMonitor = GObject.registerClass(
                             break;
 
                         case 'g':
-                            this._ethUnit.text = boolUnit ? 'g' : 'G';
+                            eunit = boolUnit ? 'g' : 'G';
                             du[0] /= unit;
                             du[1] /= unit;
                             du[0] /= unit;
@@ -1833,7 +1832,7 @@ const ResourceMonitor = GObject.registerClass(
                             break;
 
                         case 't':
-                            this._ethUnit.text = boolUnit ? 't' : 'T';
+                            eunit = boolUnit ? 't' : 'T';
                             du[0] /= unit;
                             du[1] /= unit;
                             du[0] /= unit;
@@ -1848,26 +1847,26 @@ const ResourceMonitor = GObject.registerClass(
 
                         default:
                             if (du[0] > unit || du[1] > unit) {
-                                this._ethUnit.text = boolUnit ? 'k' : 'K';
+                                eunit = boolUnit ? 'k' : 'K';
                                 du[0] /= unit;
                                 du[1] /= unit;
                                 if (du[0] > unit || du[1] > unit) {
-                                    this._ethUnit.text = boolUnit ? 'm' : 'M';
+                                    eunit = boolUnit ? 'm' : 'M';
                                     du[0] /= unit;
                                     du[1] /= unit;
                                     if (du[0] > unit || du[1] > unit) {
-                                        this._ethUnit.text = boolUnit ? 'g' : 'G';
+                                        eunit = boolUnit ? 'g' : 'G';
                                         du[0] /= unit;
                                         du[1] /= unit;
                                         if (du[0] > unit || du[1] > unit) {
-                                            this._ethUnit.text = boolUnit ? 't' : 'T';
+                                            eunit = boolUnit ? 't' : 'T';
                                             du[0] /= unit;
                                             du[1] /= unit;
                                         }
                                     }
                                 }
                             } else {
-                                this._ethUnit.text = boolUnit ? 'b' : 'B';
+                                eunit = boolUnit ? 'b' : 'B';
                             }
 
                             break;
@@ -1877,9 +1876,9 @@ const ResourceMonitor = GObject.registerClass(
                 this._ethIdleOld = idle;
 
                 if (this._decimalsStatus) {
-                    this._ethValue.text = `${du[0].toFixed(1)}|${du[1].toFixed(1)}`;
+                    this._ethValue.text = `${du[0].toFixed(1)}|${du[1].toFixed(1)}${eunit}`;
                 } else {
-                    this._ethValue.text = `${du[0].toFixed(0)}|${du[1].toFixed(0)}`;
+                    this._ethValue.text = `${du[0].toFixed(0)}|${du[1].toFixed(0)}${eunit}`;
                 }
             });
         }
@@ -1913,6 +1912,7 @@ const ResourceMonitor = GObject.registerClass(
                 const unit = boolUnit ? 1000 : 1024;
                 const factor = boolUnit ? 8 : 1;
 
+                let wunit = "";
                 if (delta > 0) {
                     for (let i = 0; i < 2; i++) {
                         du[i] = ((duTot[i] - this._duTotWlanOld[i]) * factor) / delta;
@@ -1921,17 +1921,17 @@ const ResourceMonitor = GObject.registerClass(
 
                     switch (this._netUnitMeasure) {
                         case 'b':
-                            this._wlanUnit.text = boolUnit ? 'b' : 'B';
+                            wunit = boolUnit ? 'b' : 'B';
                             break;
 
                         case 'k':
-                            this._wlanUnit.text = boolUnit ? 'k' : 'K';
+                            wunit = boolUnit ? 'k' : 'K';
                             du[0] /= unit;
                             du[1] /= unit;
                             break;
 
                         case 'm':
-                            this._wlanUnit.text = boolUnit ? 'm' : 'M';
+                            wunit = boolUnit ? 'm' : 'M';
                             du[0] /= unit;
                             du[1] /= unit;
                             du[0] /= unit;
@@ -1939,7 +1939,7 @@ const ResourceMonitor = GObject.registerClass(
                             break;
 
                         case 'g':
-                            this._wlanUnit.text = boolUnit ? 'g' : 'G';
+                            wunit = boolUnit ? 'g' : 'G';
                             du[0] /= unit;
                             du[1] /= unit;
                             du[0] /= unit;
@@ -1949,7 +1949,7 @@ const ResourceMonitor = GObject.registerClass(
                             break;
 
                         case 't':
-                            this._wlanUnit.text = boolUnit ? 't' : 'T';
+                            wunit = boolUnit ? 't' : 'T';
                             du[0] /= unit;
                             du[1] /= unit;
                             du[0] /= unit;
@@ -1964,26 +1964,26 @@ const ResourceMonitor = GObject.registerClass(
 
                         default:
                             if (du[0] > unit || du[1] > unit) {
-                                this._wlanUnit.text = boolUnit ? 'k' : 'K';
+                                wunit = boolUnit ? 'k' : 'K';
                                 du[0] /= unit;
                                 du[1] /= unit;
                                 if (du[0] > unit || du[1] > unit) {
-                                    this._wlanUnit.text = boolUnit ? 'm' : 'M';
+                                    wunit = boolUnit ? 'm' : 'M';
                                     du[0] /= unit;
                                     du[1] /= unit;
                                     if (du[0] > unit || du[1] > unit) {
-                                        this._wlanUnit.text = boolUnit ? 'g' : 'G';
+                                        wunit = boolUnit ? 'g' : 'G';
                                         du[0] /= unit;
                                         du[1] /= unit;
                                         if (du[0] > unit || du[1] > unit) {
-                                            this._wlanUnit.text = boolUnit ? 't' : 'T';
+                                            wunit = boolUnit ? 't' : 'T';
                                             du[0] /= unit;
                                             du[1] /= unit;
                                         }
                                     }
                                 }
                             } else {
-                                this._wlanUnit.text = boolUnit ? 'b' : 'B';
+                                wunit = boolUnit ? 'b' : 'B';
                             }
 
                             break;
@@ -1993,9 +1993,9 @@ const ResourceMonitor = GObject.registerClass(
                 this._wlanIdleOld = idle;
 
                 if (this._decimalsStatus) {
-                    this._wlanValue.text = `${du[0].toFixed(1)}|${du[1].toFixed(1)}`;
+                    this._wlanValue.text = `${du[0].toFixed(1)}|${du[1].toFixed(1)}${wunit}`;
                 } else {
-                    this._wlanValue.text = `${du[0].toFixed(0)}|${du[1].toFixed(0)}`;
+                    this._wlanValue.text = `${du[0].toFixed(0)}|${du[1].toFixed(0)}${wunit}`;
                 }
             });
         }
@@ -2004,25 +2004,26 @@ const ResourceMonitor = GObject.registerClass(
             if (GLib.file_test('/sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq', GLib.FileTest.EXISTS)) {
                 this._loadFile('/sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq').then(contents => {
                     let value = parseInt(ByteArray.toString(contents));
+                    let unit = "";
 
                     if (value > 999999) {
-                        this._cpuFrequencyUnit.text = 'GHz';
+                        unit = 'GHz';
                         value /= 1000;
                         value /= 1000;
                     } else {
-                        this._cpuFrequencyUnit.text = 'MHz';
+                        unit = 'MHz';
                         value /= 1000;
                     }
 
                     if (this._decimalsStatus) {
-                        this._cpuFrequencyValue.text = `[${value.toFixed(2)}`;
+                        this._cpuFrequencyValue.text = `[${value.toFixed(2)}${unit}`;
                     } else {
-                        this._cpuFrequencyValue.text = `[${value.toFixed(0)}`;
+                        this._cpuFrequencyValue.text = `[${value.toFixed(0)}${unit}`;
                     }
                 });
             } else {
                 this._cpuFrequencyValue.text = _('[Frequency Error');
-                this._cpuFrequencyUnit.text = '';
+                //this._cpuFrequencyUnit.text = '';
             }
         }
 
@@ -2062,27 +2063,28 @@ const ResourceMonitor = GObject.registerClass(
 
                             if (this._cpuTemperaturesReads >= this._thermalCpuTemperatureDevicesList.length) {
                                 // Temperatures Average
+                                let unit = "";
                                 this._cpuTemperatures /= this._cpuTemperaturesReads;
 
                                 switch (this._thermalTemperatureUnit) {
                                     case 'f':
                                         this._cpuTemperatures = (this._cpuTemperatures * 1.8) + 32;
-                                        this._cpuTemperatureUnit.text = '°F';
+                                        unit = '°F';
 
                                         break;
 
                                     case 'c':
 
                                     default:
-                                        this._cpuTemperatureUnit.text = '°C';
+                                        unit = '°C';
 
                                         break;
                                 }
 
                                 if (this._decimalsStatus) {
-                                    this._cpuTemperatureValue.text = `[${this._cpuTemperatures.toFixed(1)}`;
+                                    this._cpuTemperatureValue.text = `[${this._cpuTemperatures.toFixed(1)}${unit}`;
                                 } else {
-                                    this._cpuTemperatureValue.text = `[${this._cpuTemperatures.toFixed(0)}`;
+                                    this._cpuTemperatureValue.text = `[${this._cpuTemperatures.toFixed(0)}${unit}`;
                                 }
 
                                 this._cpuTemperatures = 0;
@@ -2091,7 +2093,7 @@ const ResourceMonitor = GObject.registerClass(
                         });
                     } else {
                         this._cpuTemperatureValue.text = _('[Temperature Error');
-                        this._cpuTemperatureUnit.text = '';
+                        // this._cpuTemperatureUnit.text = '';
                     }
                 }
             } else {
@@ -2319,7 +2321,7 @@ const DiskContainer = GObject.registerClass(
             this._elementsName = [];
             this._elementsLabel = [];
             this._elementsValue = [];
-            this._elementsUnit = [];
+            //this._elementsUnit = [];
         }
 
         set_element_width(width) {
@@ -2342,7 +2344,7 @@ const DiskContainer = GObject.registerClass(
             this._elementsName = [];
             this._elementsLabel = [];
             this._elementsValue = [];
-            this._elementsUnit = [];
+            //this._elementsUnit = [];
 
             this.remove_all_children();
         }
@@ -2368,14 +2370,14 @@ const DiskContainerStats = GObject.registerClass(
             });
             this._elementsValue['single'].set_style('text-align: right;');
 
-            this._elementsUnit['single'] = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: 'K'
-            });
-            this._elementsUnit['single'].set_style('padding-left: 0.125em;');
+            // this._elementsUnit['single'] = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: 'K'
+            // });
+            // this._elementsUnit['single'].set_style('padding-left: 0.125em;');
 
             this.add(this._elementsValue['single']);
-            this.add(this._elementsUnit['single']);
+            //this.add(this._elementsUnit['single']);
 
             this.idleOld['single'] = 0;
             this.rwTotOld['single'] = [0, 0];
@@ -2395,15 +2397,15 @@ const DiskContainerStats = GObject.registerClass(
             });
             this._elementsValue[filesystem].set_style('text-align: right;');
 
-            this._elementsUnit[filesystem] = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: 'K'
-            });
-            this._elementsUnit[filesystem].set_style('padding-left: 0.125em;');
+            // this._elementsUnit[filesystem] = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: 'K'
+            // });
+            // this._elementsUnit[filesystem].set_style('padding-left: 0.125em;');
 
             this.add(this._elementsName[filesystem]);
             this.add(this._elementsValue[filesystem]);
-            this.add(this._elementsUnit[filesystem]);
+            //this.add(this._elementsUnit[filesystem]);
 
             this.idleOld[filesystem] = 0;
             this.rwTotOld[filesystem] = [0, 0];
@@ -2416,10 +2418,10 @@ const DiskContainerStats = GObject.registerClass(
                         if (element !== 'single') {
                             this._elementsName[element].hide();
                             this._elementsValue[element].hide();
-                            this._elementsUnit[element].hide();
+                            //this._elementsUnit[element].hide();
                         } else {
                             this._elementsValue[element].show();
-                            this._elementsUnit[element].show();
+                            //this._elementsUnit[element].show();
                         }
                     });
 
@@ -2432,10 +2434,10 @@ const DiskContainerStats = GObject.registerClass(
                         if (element !== 'single') {
                             this._elementsName[element].show();
                             this._elementsValue[element].show();
-                            this._elementsUnit[element].show();
+                            //this._elementsUnit[element].show();
                         } else {
                             this._elementsValue[element].hide();
-                            this._elementsUnit[element].hide();
+                            //this._elementsUnit[element].hide();
                         }
                     });
 
@@ -2465,8 +2467,8 @@ const DiskContainerStats = GObject.registerClass(
 
         update_element_value(filesystem, value, unit) {
             if (this._elementsValue[filesystem]) {
-                this._elementsValue[filesystem].text = value;
-                this._elementsUnit[filesystem].text = unit;
+                this._elementsValue[filesystem].text = value + unit;
+                //this._elementsUnit[filesystem].text = unit;
             }
         }
     });
@@ -2487,21 +2489,21 @@ const DiskContainerSpace = GObject.registerClass(
             });
             this._elementsValue[filesystem].set_style('text-align: right;');
 
-            this._elementsUnit[filesystem] = new St.Label({
-                y_align: Clutter.ActorAlign.CENTER,
-                text: this._diskSpaceUnitType ? '%' : 'KB'
-            });
-            this._elementsUnit[filesystem].set_style('padding-left: 0.125em;');
+            // this._elementsUnit[filesystem] = new St.Label({
+            //     y_align: Clutter.ActorAlign.CENTER,
+            //     text: this._diskSpaceUnitType ? '%' : 'KB'
+            // });
+            // this._elementsUnit[filesystem].set_style('padding-left: 0.125em;');
 
             this.add(this._elementsName[filesystem]);
             this.add(this._elementsValue[filesystem]);
-            this.add(this._elementsUnit[filesystem]);
+            // this.add(this._elementsUnit[filesystem]);
         }
 
         update_element_value(filesystem, value, unit) {
             if (this._elementsValue[filesystem]) {
-                this._elementsValue[filesystem].text = value;
-                this._elementsUnit[filesystem].text = unit;
+                this._elementsValue[filesystem].text = value + unit;
+                // this._elementsUnit[filesystem].text = unit;
             }
         }
     });
