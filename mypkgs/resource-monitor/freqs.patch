diff --git a/extension.js b/extension.js
index 83707d0..489bc65 100644
--- a/extension.js
+++ b/extension.js
@@ -257,6 +257,12 @@ const ResourceMonitor = GObject.registerClass(
         this._refreshTime,
         this._refreshHandler.bind(this)
       );
+
+      this._cpus = [];
+      for (let i = 0; GLib.file_test(`/sys/devices/system/cpu/cpu${i}/cpufreq/scaling_cur_freq`, GLib.FileTest.EXISTS); i++) {
+          this._cpus.push(`/sys/devices/system/cpu/cpu${i}/cpufreq/scaling_cur_freq`);
+      }
+
       this._refreshHandler();
     }
 
@@ -2576,37 +2582,38 @@ const ResourceMonitor = GObject.registerClass(
     }
 
     _refreshCpuFrequencyValue() {
-      this._executeCommand([
-        "bash",
-        "-c",
-        "cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq",
-      ])
-        .then((contents) => {
-          const lines = contents.split("\n");
+      let freqs = [];
+      for (let i = 0; i < this._cpus.length; i++) {
+        freqs.push(this._loadFile(this._cpus[i]).then(contents => {
+          return parseInt(ByteArray.toString(contents).trim(), 10);
+        }).catch(reason => {
+          log(`FREQ READ FAILED ${reason}`);
+        }));
+      }
 
-          // Calculate the maximum frequency in the list
-          let maxFrequency = Math.max(
-            ...lines
-              .map((line) => parseInt(line.trim(), 10))
-              .filter(Number.isFinite)
-          );
+      Promise.all(freqs).then(values => {
+        // Calculate the maximum frequency in the list
+        let maxFrequency = Math.max(
+          ...values
+            .filter(Number.isFinite)
+        );
 
-          // Convert frequency to desired unit and format the output
-          const [value, unit] = this._convertValueToUnit(
-            maxFrequency,
-            this._cpuFrequencyUnitMeasure,
-            true
-          );
+        // Convert frequency to desired unit and format the output
+        const [value, unit] = this._convertValueToUnit(
+          maxFrequency,
+          this._cpuFrequencyUnitMeasure,
+          true
+        );
 
-          this._cpuFrequencyValue.style = this._getUsageColor(
-            value,
-            this._cpuFrequencyColors
-          );
-          this._cpuFrequencyValue.text = `${this._getValueFixed(value)}${unit}`;
-        })
-        .catch((error) =>
-          console.error("[Resource_Monitor] Error reading cpu frequncy:", error)
+        this._cpuFrequencyValue.style = this._getUsageColor(
+          value,
+          this._cpuFrequencyColors
         );
+        this._cpuFrequencyValue.text = `${this._getValueFixed(value)}${unit}`;
+      })
+      .catch((error) =>
+        console.error("[Resource_Monitor] Error reading cpu frequncy:", error)
+      );
     }
 
     _refreshCpuLoadAverageValue() {
