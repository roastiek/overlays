diff --git a/extension.js b/extension.js
index b3f3276..83707d0 100644
--- a/extension.js
+++ b/extension.js
@@ -26,6 +26,8 @@ import GLib from "gi://GLib";
 import Shell from "gi://Shell";
 import NM from "gi://NM";
 
+const ByteArray = imports.byteArray;
+
 import * as Main from "resource:///org/gnome/shell/ui/main.js";
 import * as PanelMenu from "resource:///org/gnome/shell/ui/panelMenu.js";
 import * as Util from "resource:///org/gnome/shell/misc/util.js";
@@ -2637,6 +2639,8 @@ const ResourceMonitor = GObject.registerClass(
 
     _refreshCpuTemperatureValue() {
       if (this._thermalCpuTemperatureDevicesList.length > 0) {
+        let temps = [];
+
         this._thermalCpuTemperatureDevicesList.forEach((element) => {
           const [, status, path] = element.split(
             THERMAL_CPU_TEMPERATURE_DEVICES_LIST_SEPARATOR
@@ -2646,6 +2650,7 @@ const ResourceMonitor = GObject.registerClass(
           if (status === "false" || !GLib.file_test(path, GLib.FileTest.EXISTS))
             return;
 
+          temps.push(
           this._loadFile(path)
             .then((contents) => {
               const temperature = parseInt(
@@ -2653,43 +2658,46 @@ const ResourceMonitor = GObject.registerClass(
                 10
               );
 
-              if (!isNaN(temperature)) {
-                this._cpuTemperatures += temperature / 1000;
-                this._cpuTemperaturesReadings++;
-              }
-
-              // Process the final average once all readings are completed
-              if (
-                this._cpuTemperaturesReadings >=
-                this._thermalCpuTemperatureDevicesList.length
-              ) {
-                const avg =
-                  this._cpuTemperatures / this._cpuTemperaturesReadings;
-
-                // Convert temperature to desired unit
-                const [value, unit] = this._convertTemperature(avg);
-
-                this._cpuTemperatureValue.text = `${this._getValueFixed(
-                  value
-                )}${unit}`;
-
-                // Apply color based on thresholds
-                this._cpuTemperatureValue.style = this._getUsageColor(
-                  value,
-                  this._thermalCpuColors
-                );
-
-                // Reset totals
-                this._cpuTemperatures = 0;
-                this._cpuTemperaturesReadings = 0;
-              }
+              return temperature;
             })
             .catch((error) => {
               console.error(
                 "[Resource_Monitor] Error reading cpu thermal:",
                 error
               );
-            });
+            })
+          );
+        });
+
+        Promise.all(temps).then(values => {
+          let temp = 0;
+          let count = 0;
+
+          values.forEach((temperature) => {
+            if (!isNaN(temperature)) {
+              temp = temp + temperature / 1000;
+              count++;
+            }
+          });
+
+          if (count > 0) {
+            let avg = temp / count
+
+            // Convert temperature to desired unit
+            const [value, unit] = this._convertTemperature(avg);
+
+            this._cpuTemperatureValue.text = `${this._getValueFixed(
+              value
+            )}${unit}`;
+
+            // Apply color based on thresholds
+            this._cpuTemperatureValue.style = this._getUsageColor(
+              value,
+              this._thermalCpuColors
+            );
+          }
+        }).catch(reason => {
+          log(`FAILED TEMP READ ${reason}`);
         });
       } else {
         this._cpuTemperatureValue.text = "--";
